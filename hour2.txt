in our solution ex add one class new movie under Model
we give a couple of prop 
like int id and string name
this is a poko which represent state and behaviour of our app
here we have only props for this case 

so assuming that this page will be 
/movies/random

so we need to create a controller 
called movies controller with action as random

so in solution exp right click controller
add controlle 

and empty controller


so this controller is a very simple class that derives from Controller class


here i will change the index to Random

so we will call /moview/random

if we dont use resharper then we have to declare namespace by ourself

if real world app we ofter get Models from database

for now lets just focus on core building blocks of our app

and the reason this view file is red as it is telling us this view doesn't exist		


so if we see inside movies under view we dont have view


we will create a partial view

that we can use at different placess

so let untick this for now

and let chose that we want a layout 


let chose by default layout

here in this block we have two properties
viewBag.title
Layout

now if we see view is no longer red

so we will output this model in our view

in out html

<h2>
	@Model.
</h2>

at the top we need a directive to specify the type of the model for this view


@model lowercase
@model Vidly.Models.MOvie

if in this file if we press f5 
then it will take us to movies.random()


this def looks ugly
our asp.net app uses bootstrap as css framework

bootswatch

so under lumen bootstrap.css
under the content folder 
bootstrap-lumen.css

now we need to replace the refrence

under app.start open up bundle config

the bundling reduces the no of http requests	

so we will modify the css bundle

asp.net mvc fundamentals
entity framework(code first)
forms 
validation

we will use api to build restful services

after this we will shift our focus to client side devlopment

we will use identity framwork 

authenticatoin and autherization

performance optimization

building a feature end to end

deployement

*********************************************


this action result is the base class of all the action result in mvc

depending on what action does 
it will return one of its der classes depending on what action does

here view is just method inherited from base controller class
alternative we can also do this
return View(movie)
return new ViewResult();

we can also change the return type to ViewResult	

we have partialViewResult partialview
contectResult Content() ===> text

redirect result to redirect the user to a url

redirent to routeResult to redirect to a action

jsonResult to serialize a json() object

FileResult to return a file

httpNotFound to return a 404 error

emptyresult when we need to return a void

lets return content


return Content("HELLO WORLD")

return HttpNotFound();

now build the app using ctrl shift b
w/o opening a new tab in the browser


return new EmptyResult();


return RedirectToAction("Index","Home", new {name : "name", soryBy: "name"})


for the most we will be using view httpnotfound and redirect

we took a look at output params

now lets take a look at input params

the mvc framework looks for the same name in request data

if the variable with that name exists this will pass the value auto to the target action

this can be in the url in the query string 


in the data posted using a form


in the movies controller i will create a new action

public ActionResult Edit(int id){
return Content("id"+id)

}

/edit/1

returns id=1

/edit?id=1

return
id=1


what if i name the param to movieId in controller

we can do 

/edit?movieId=1

but we cannot do 
/edit/1

as the default parameter is id


we can also use optional parameter 

public ActionResult Index(int pageIndex, string sortBy)

to make it nullable
public ActionResult Index(int? pageIndex, string sortBy)

and string in c sharp is nullable


if(!pageIndex.HasValue)
pageIndex= 1

if(String.isNullOrWhiteSpace(soryBy))
sortyBy=name
