in our solution ex add one class new movie under Model
we give a couple of prop 
like int id and string name
this is a poko which represent state and behaviour of our app
here we have only props for this case 

so assuming that this page will be 
/movies/random

so we need to create a controller 
called movies controller with action as random

so in solution exp right click controller
add controlle 

and empty controller


so this controller is a very simple class that derives from Controller class


here i will change the index to Random

so we will call /moview/random

if we dont use resharper then we have to declare namespace by ourself

if real world app we ofter get Models from database

for now lets just focus on core building blocks of our app

and the reason this view file is red as it is telling us this view doesn't exist		


so if we see inside movies under view we dont have view


we will create a partial view

that we can use at different placess

so let untick this for now

and let chose that we want a layout 


let chose by default layout

here in this block we have two properties
viewBag.title
Layout

now if we see view is no longer red

so we will output this model in our view

in out html

<h2>
	@Model.
</h2>

at the top we need a directive to specify the type of the model for this view


@model lowercase
@model Vidly.Models.MOvie

if in this file if we press f5 
then it will take us to movies.random()


this def looks ugly
our asp.net app uses bootstrap as css framework

bootswatch

so under lumen bootstrap.css
under the content folder 
bootstrap-lumen.css

now we need to replace the refrence

under app.start open up bundle config

the bundling reduces the no of http requests	

so we will modify the css bundle

asp.net mvc fundamentals
entity framework(code first)
forms 
validation

we will use api to build restful services

after this we will shift our focus to client side devlopment

we will use identity framwork 

authenticatoin and autherization

performance optimization

building a feature end to end

deployement

*********************************************


this action result is the base class of all the action result in mvc

depending on what action does 
it will return one of its der classes depending on what action does

here view is just method inherited from base controller class
alternative we can also do this
return View(movie)
return new ViewResult();

we can also change the return type to ViewResult	

we have partialViewResult partialview
contectResult Content() ===> text

redirect result to redirect the user to a url

redirent to routeResult to redirect to a action

jsonResult to serialize a json() object

FileResult to return a file

httpNotFound to return a 404 error

emptyresult when we need to return a void

lets return content


return Content("HELLO WORLD")

return HttpNotFound();

now build the app using ctrl shift b
w/o opening a new tab in the browser


return new EmptyResult();


return RedirectToAction("Index","Home", new {name : "name", soryBy: "name"})


for the most we will be using view httpnotfound and redirect

we took a look at output params

now lets take a look at input params

the mvc framework looks for the same name in request data

if the variable with that name exists this will pass the value auto to the target action

this can be in the url in the query string 


in the data posted using a form


in the movies controller i will create a new action

public ActionResult Edit(int id){
return Content("id"+id)

}

/edit/1

returns id=1

/edit?id=1

return
id=1


what if i name the param to movieId in controller

we can do 

/edit?movieId=1

but we cannot do 
/edit/1

as the default parameter is id


we can also use optional parameter 

public ActionResult Index(int pageIndex, string sortBy)

to make it nullable
public ActionResult Index(int? pageIndex, string sortBy)

and string in c sharp is nullable


if(!pageIndex.HasValue)
pageIndex= 1

if(String.isNullOrWhiteSpace(soryBy))
sortyBy=name


sometimes we need more parameter


we need to add a route before a default route	

order should be most specific to most generic

this method has few overloads 

the one we use most of the times is the one with three params

name, url, defaults

for defaults we use anonymous object



routes.MapRoute(
 "MovieByReleaseDate",
 "movies/release/{year}/{month}",
 new { controller = "Movies",
  action = "ByReleaseDate"
  }
)

now i will show you a quick way to create an action

mvcaction4 tab

this another code snippet


now lets add some constraints to our app

we can use regex



so look at this code 
currently we have only one custom route here

sooner or later its gonna grow and later it can become a mess



another thing is you have to go back and forth
between your actions and custome routes

and the third problem is 
if we rename our controller

we have to remember to come back to routesConfig and apply the name change


with mvc5 
instead of creating a route here 

we can use an attribute to the corresponding action


new version we use attribute routing


first you need to enable it 

routes.MapMvcAttributeRoutes();


so we delete our conventional route

and go back to the controller

and apply the attribute

[Route("movies/released/{year}/{month}")]
public ActionResult ByReleaseYear(int year, int Month){

}

[Route("movies/released/{year}/{month: regex(\\d{4}): range(1,12)}")]
public ActionResult ByReleaseYear(int year, int Month){

}


just be aware that there are many contraints


earlier we passed our model to the view

there are two ways to pass data to the views 

one way is to use the view data dictionary

every contoller has viewdata which is of type dictionary

ViewData["Movie"]  = movie;

we return View();


now instead of using Model property we use viewData


now if we do 

@ViewData["movies"].

till now we cannot access name property of our movie


we have to cast back 

and the second problem here is we have change back the string here


then they introduced viewBag

and 

the way we pass data here is ViewBag.movie

but both are very fragile and we have the change the names in two places in both the cases


View Models

what is have to pass the list of movies and list of customers

till now we have only one model property 

So we use ViewModel

viewModel has data specific to that view

first i am gonna add Customer class to our models

lets put our ViewModels in a separate folder

RandomMovieViewModel               convention we used suffix


so we need two things here

public Movie Movie {get; set;};
public List<Customers> Customers {get; set;}

now lets go back to our controller

and create customer also

var customer = new List<Customer> {
	new Customer{name: "Customer 1"},
	new Customer{Name: "Customer 2"}
}

var viewModel = new RandomMovieViewModel{
	Movie = movie,
	Customers = customer
}

return view(viewModel)

so we have to change this

@model Vidly.ViewModels.RandomViewModel


@Model.Movie.Name

@Model.Customers



